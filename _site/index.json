{
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.AvailabilityTestAgent.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.AvailabilityTestAgent.html",
    "title": "Class AvailabilityTestAgent | XPing365",
    "keywords": "Class AvailabilityTestAgent Namespace XPing365.Sdk.Availability Assembly XPing365.Sdk.Availability.dll The AvailabilityTestAgent class is a concrete implementation of the TestAgent class that is used to perform availability tests. This class consist of following action test steps: DnsLookup, IPAddressAccessibilityCheck and SendHttpRequest to perform the availability tests. All action steps are performed in a specific order, and their results are added as TestStep results to the TestSession object. Any failures can be retrieved from the Failures property along with the error description. public sealed class AvailabilityTestAgent : TestAgent Inheritance object TestAgent AvailabilityTestAgent Inherited Members TestAgent.Handlers TestAgent.RunAsync(Uri, TestSettings, IValidator, IProgress<TestStep>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples using XPing365.Sdk.Availability; Host.CreateDefaultBuilder() .ConfigureServices(services => { services.AddAvailabilityTestAgent(); }); var testAgent = _serviceProvider.GetRequiredService<AvailabilityTestAgent>(); TestSession session = await testAgent .RunAsync( new Uri(\"www.demoblaze.com\"), TestSettings.DefaultForAvailability) .ConfigureAwait(false); Constructors AvailabilityTestAgent(IHttpClientFactory) The AvailabilityTestAgent class is a concrete implementation of the TestAgent class that is used to perform availability tests. This class consist of following action test steps: DnsLookup, IPAddressAccessibilityCheck and SendHttpRequest to perform the availability tests. All action steps are performed in a specific order, and their results are added as TestStep results to the TestSession object. Any failures can be retrieved from the Failures property along with the error description. public AvailabilityTestAgent(IHttpClientFactory httpClientFactory) Parameters httpClientFactory IHttpClientFactory IHttpClientFactory implementation instance. Examples using XPing365.Sdk.Availability; Host.CreateDefaultBuilder() .ConfigureServices(services => { services.AddAvailabilityTestAgent(); }); var testAgent = _serviceProvider.GetRequiredService<AvailabilityTestAgent>(); TestSession session = await testAgent .RunAsync( new Uri(\"www.demoblaze.com\"), TestSettings.DefaultForAvailability) .ConfigureAwait(false);"
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Configurations.HttpClientConfiguration.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Configurations.HttpClientConfiguration.html",
    "title": "Class HttpClientConfiguration | XPing365",
    "keywords": "Class HttpClientConfiguration Namespace XPing365.Sdk.Availability.Configurations Assembly XPing365.Sdk.Availability.dll The HttpClientConfiguration class is used to provide a set of properties for various features of the HttpClient class and its policies. Normally these properties have the predefined defaults, however can also be changed accordingly to your requirements. public class HttpClientConfiguration Inheritance object HttpClientConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DurationOfBreak Gets or sets the duration the circuit will stay open before resetting. Default is 30[s]. See the remarks on PolicyHttpMessageHandler. public TimeSpan DurationOfBreak { get; set; } Property Value TimeSpan HandledEventsAllowedBeforeBreaking Gets or sets the number of exceptions or handled results that are allowed before opening the circuit. See the remarks on PolicyHttpMessageHandler. public int HandledEventsAllowedBeforeBreaking { get; set; } Property Value int PooledConnectionLifetime Gets or sets how long a connection can be in the pool to be considered reusable. Default is 1 minute. See the remarks on PooledConnectionLifetime. public TimeSpan PooledConnectionLifetime { get; set; } Property Value TimeSpan SleepDurations Gets or sets the sleep durations to wait for on each retry. Default is 1[s] on 1st retry, 5[s] on 2nd retry and 10[s] on 3rd retry. See the remarks on PolicyHttpMessageHandler. public IEnumerable<TimeSpan> SleepDurations { get; set; } Property Value IEnumerable<TimeSpan>"
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Configurations.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Configurations.html",
    "title": "Namespace XPing365.Sdk.Availability.Configurations | XPing365",
    "keywords": "Namespace XPing365.Sdk.Availability.Configurations Classes HttpClientConfiguration The HttpClientConfiguration class is used to provide a set of properties for various features of the HttpClient class and its policies. Normally these properties have the predefined defaults, however can also be changed accordingly to your requirements."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Extensions.DependencyInjectionExtension.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Extensions.DependencyInjectionExtension.html",
    "title": "Class DependencyInjectionExtension | XPing365",
    "keywords": "Class DependencyInjectionExtension Namespace XPing365.Sdk.Availability.Extensions Assembly XPing365.Sdk.Availability.dll public static class DependencyInjectionExtension Inheritance object DependencyInjectionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAvailabilityTestAgent(IServiceCollection, Action<IServiceProvider, HttpClientConfiguration>?) This extension method adds the AvailabilityTestAgent service and related services to your applicationâ€™s service collection and configures a named HttpClient clients. public static IServiceCollection AddAvailabilityTestAgent(this IServiceCollection services, Action<IServiceProvider, HttpClientConfiguration>? configuration = null) Parameters services IServiceCollection The IServiceCollection. configuration Action<IServiceProvider, HttpClientConfiguration> The HttpClientConfiguration. Returns IServiceCollection IServiceCollection object."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Extensions.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Extensions.html",
    "title": "Namespace XPing365.Sdk.Availability.Extensions | XPing365",
    "keywords": "Namespace XPing365.Sdk.Availability.Extensions Classes DependencyInjectionExtension"
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.DnsLookup.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.DnsLookup.html",
    "title": "Class DnsLookup | XPing365",
    "keywords": "Class DnsLookup Namespace XPing365.Sdk.Availability.TestSteps Assembly XPing365.Sdk.Availability.dll The DnsLookup class is a concrete implementation of the TestStepHandler class that is used to perform a DNS lookup. It uses the mechanisms provided by the operating system to perform DNS lookups. public sealed class DnsLookup : TestStepHandler Inheritance object TestStepHandler DnsLookup Inherited Members TestStepHandler.Name TestStepHandler.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DnsLookup() The DnsLookup class is a concrete implementation of the TestStepHandler class that is used to perform a DNS lookup. It uses the mechanisms provided by the operating system to perform DNS lookups. public DnsLookup() Fields StepName public const string StepName = \"DNS lookup\" Field Value string Methods HandleStepAsync(Uri, TestSettings, TestSession, CancellationToken) This method performs the test step operation asynchronously. public override Task<TestStep> HandleStepAsync(Uri url, TestSettings settings, TestSession session, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the this operation. Returns Task<TestStep> TestStep object."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.IPAddressAccessibilityCheck.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.IPAddressAccessibilityCheck.html",
    "title": "Class IPAddressAccessibilityCheck | XPing365",
    "keywords": "Class IPAddressAccessibilityCheck Namespace XPing365.Sdk.Availability.TestSteps Assembly XPing365.Sdk.Availability.dll The IPAddressAccessibilityCheck class is a concrete implementation of the TestStepHandler class that is used to check the accessibility of an IP address. It uses the mechanisms provided by the operating system to check the accessibility of an IP address. public sealed class IPAddressAccessibilityCheck : TestStepHandler Inheritance object TestStepHandler IPAddressAccessibilityCheck Inherited Members TestStepHandler.Name TestStepHandler.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IPAddressAccessibilityCheck() The IPAddressAccessibilityCheck class is a concrete implementation of the TestStepHandler class that is used to check the accessibility of an IP address. It uses the mechanisms provided by the operating system to check the accessibility of an IP address. public IPAddressAccessibilityCheck() Fields StepName public const string StepName = \"IPAddress accessibility check\" Field Value string Methods HandleStepAsync(Uri, TestSettings, TestSession, CancellationToken) This method performs the test step operation asynchronously. public override Task<TestStep> HandleStepAsync(Uri url, TestSettings settings, TestSession session, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the this operation. Returns Task<TestStep> TestStep object."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.SendHttpRequest.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.SendHttpRequest.html",
    "title": "Class SendHttpRequest | XPing365",
    "keywords": "Class SendHttpRequest Namespace XPing365.Sdk.Availability.TestSteps Assembly XPing365.Sdk.Availability.dll The SendHttpRequest class is a concrete implementation of the TestStepHandler class that is used to send an HTTP request. It uses the IHttpClientFactory to create an instance of the HttpClient class, which is used to send the HTTP request. public sealed class SendHttpRequest : TestStepHandler Inheritance object TestStepHandler SendHttpRequest Inherited Members TestStepHandler.Name TestStepHandler.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SendHttpRequest(IHttpClientFactory) The SendHttpRequest class is a concrete implementation of the TestStepHandler class that is used to send an HTTP request. It uses the IHttpClientFactory to create an instance of the HttpClient class, which is used to send the HTTP request. public SendHttpRequest(IHttpClientFactory httpClientFactory) Parameters httpClientFactory IHttpClientFactory IHttpClientFactory implementation instance. Fields StepName public const string StepName = \"Send HTTP Request\" Field Value string Methods HandleStepAsync(Uri, TestSettings, TestSession, CancellationToken) This method performs the test step operation asynchronously. public override Task<TestStep> HandleStepAsync(Uri url, TestSettings settings, TestSession session, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the this operation. Returns Task<TestStep> TestStep object."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.TestSteps.html",
    "title": "Namespace XPing365.Sdk.Availability.TestSteps | XPing365",
    "keywords": "Namespace XPing365.Sdk.Availability.TestSteps Classes DnsLookup The DnsLookup class is a concrete implementation of the TestStepHandler class that is used to perform a DNS lookup. It uses the mechanisms provided by the operating system to perform DNS lookups. IPAddressAccessibilityCheck The IPAddressAccessibilityCheck class is a concrete implementation of the TestStepHandler class that is used to check the accessibility of an IP address. It uses the mechanisms provided by the operating system to check the accessibility of an IP address. SendHttpRequest The SendHttpRequest class is a concrete implementation of the TestStepHandler class that is used to send an HTTP request. It uses the IHttpClientFactory to create an instance of the HttpClient class, which is used to send the HTTP request."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Validators.HttpResponseHeadersValidator.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Validators.HttpResponseHeadersValidator.html",
    "title": "Class HttpResponseHeadersValidator | XPing365",
    "keywords": "Class HttpResponseHeadersValidator Namespace XPing365.Sdk.Availability.Validators Assembly XPing365.Sdk.Availability.dll The HttpResponseHeadersValidator class is a concrete implementation of the TestStepHandler class that is used to validate the response headers of an HTTP response. It takes a Func<HttpResponseHeaders, bool> delegate as a parameter, which is used to validate the response headers. The errorMessage parameter is an optional error message that can be used to provide additional information about the validation failure. public class HttpResponseHeadersValidator : TestStepHandler Inheritance object TestStepHandler HttpResponseHeadersValidator Inherited Members TestStepHandler.Name TestStepHandler.Type TestStepHandler.CreateTestStepFromException(Exception, DateTime, TimeSpan) TestStepHandler.CreateFailedTestStep(string) TestStepHandler.CreateSuccessTestStep(DateTime, TimeSpan, PropertyBag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples var responseHeadersValidator = new HttpResponseHeadersValidator( isValid: (HttpResponseHeaders headers) => headers.Contains(HeaderNames.UserAgent), errorMessage: (HttpResponseHeaders headers) => $\"The HTTP response headers did not include the expected $'{HeaderNames.UserAgent}' header.\" ); var validator = new Validator(responseHeadersValidator); Constructors HttpResponseHeadersValidator(Func<HttpResponseHeaders, bool>, Func<HttpResponseHeaders, string>?) The HttpResponseHeadersValidator class is a concrete implementation of the TestStepHandler class that is used to validate the response headers of an HTTP response. It takes a Func<HttpResponseHeaders, bool> delegate as a parameter, which is used to validate the response headers. The errorMessage parameter is an optional error message that can be used to provide additional information about the validation failure. public HttpResponseHeadersValidator(Func<HttpResponseHeaders, bool> isValid, Func<HttpResponseHeaders, string>? errorMessage = null) Parameters isValid Func<HttpResponseHeaders, bool> Func<HttpResponseHeaders, bool> delegate to validate the response headers. errorMessage Func<HttpResponseHeaders, string> Optional information about the validation failure. Examples var responseHeadersValidator = new HttpResponseHeadersValidator( isValid: (HttpResponseHeaders headers) => headers.Contains(HeaderNames.UserAgent), errorMessage: (HttpResponseHeaders headers) => $\"The HTTP response headers did not include the expected $'{HeaderNames.UserAgent}' header.\" ); var validator = new Validator(responseHeadersValidator); Fields StepName public const string StepName = \"Http response headers validation\" Field Value string Methods HandleStepAsync(Uri, TestSettings, TestSession, CancellationToken) This method performs the test step operation asynchronously. public override Task<TestStep> HandleStepAsync(Uri url, TestSettings settings, TestSession session, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the this operation. Returns Task<TestStep> TestStep object."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Validators.HttpStatusCodeValidator.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Validators.HttpStatusCodeValidator.html",
    "title": "Class HttpStatusCodeValidator | XPing365",
    "keywords": "Class HttpStatusCodeValidator Namespace XPing365.Sdk.Availability.Validators Assembly XPing365.Sdk.Availability.dll The HttpStatusCodeValidator class is a concrete implementation of the TestStepHandler class that is used to validate the HTTP status code of an HTTP response. It takes a Func<HttpStatusCode, bool> delegate as a parameter, which is used to validate the HTTP status code. The errorMessage parameter is an optional error message that can be used to provide additional information about the validation failure. public sealed class HttpStatusCodeValidator : TestStepHandler Inheritance object TestStepHandler HttpStatusCodeValidator Inherited Members TestStepHandler.Name TestStepHandler.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples var statusCodeValidator = new HttpStatusCodeValidator( isValid: (HttpStatusCode code) => code == HttpStatusCode.OK, errorMessage: (HttpStatusCode code) => $\"The HTTP request failed with status code {code}\" ); var validator = new Validator(statusCodeValidator); Constructors HttpStatusCodeValidator(Func<HttpStatusCode, bool>, Func<HttpStatusCode, string>?) The HttpStatusCodeValidator class is a concrete implementation of the TestStepHandler class that is used to validate the HTTP status code of an HTTP response. It takes a Func<HttpStatusCode, bool> delegate as a parameter, which is used to validate the HTTP status code. The errorMessage parameter is an optional error message that can be used to provide additional information about the validation failure. public HttpStatusCodeValidator(Func<HttpStatusCode, bool> isValid, Func<HttpStatusCode, string>? errorMessage = null) Parameters isValid Func<HttpStatusCode, bool> Func<HttpStatusCode, bool> delegate to validate the HTTP status code. errorMessage Func<HttpStatusCode, string> Optional information about the validation failure. Examples var statusCodeValidator = new HttpStatusCodeValidator( isValid: (HttpStatusCode code) => code == HttpStatusCode.OK, errorMessage: (HttpStatusCode code) => $\"The HTTP request failed with status code {code}\" ); var validator = new Validator(statusCodeValidator); Fields StepName public const string StepName = \"Http status code validation\" Field Value string Methods HandleStepAsync(Uri, TestSettings, TestSession, CancellationToken) This method performs the test step operation asynchronously. public override Task<TestStep> HandleStepAsync(Uri url, TestSettings settings, TestSession session, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel this operation. Returns Task<TestStep> TestStep object."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Validators.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.Validators.html",
    "title": "Namespace XPing365.Sdk.Availability.Validators | XPing365",
    "keywords": "Namespace XPing365.Sdk.Availability.Validators Classes HttpResponseHeadersValidator The HttpResponseHeadersValidator class is a concrete implementation of the TestStepHandler class that is used to validate the response headers of an HTTP response. It takes a Func<HttpResponseHeaders, bool> delegate as a parameter, which is used to validate the response headers. The errorMessage parameter is an optional error message that can be used to provide additional information about the validation failure. HttpStatusCodeValidator The HttpStatusCodeValidator class is a concrete implementation of the TestStepHandler class that is used to validate the HTTP status code of an HTTP response. It takes a Func<HttpStatusCode, bool> delegate as a parameter, which is used to validate the HTTP status code. The errorMessage parameter is an optional error message that can be used to provide additional information about the validation failure."
  },
  "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.html": {
    "href": "api/XPing365.Sdk.Availability/XPing365.Sdk.Availability.html",
    "title": "Namespace XPing365.Sdk.Availability | XPing365",
    "keywords": "Namespace XPing365.Sdk.Availability Classes AvailabilityTestAgent The AvailabilityTestAgent class is a concrete implementation of the TestAgent class that is used to perform availability tests. This class consist of following action test steps: DnsLookup, IPAddressAccessibilityCheck and SendHttpRequest to perform the availability tests. All action steps are performed in a specific order, and their results are added as TestStep results to the TestSession object. Any failures can be retrieved from the Failures property along with the error description."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.PropertyBag.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.PropertyBag.html",
    "title": "Class PropertyBag | XPing365",
    "keywords": "Class PropertyBag Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll PropertyBag class represents a collection of key-value pairs that allows to store any object for a given unique key. All keys are represented by PropertyBagKey but values may be of any type. Null values are not permitted, since a null entry represents the absence of the key. public class PropertyBag Inheritance object PropertyBag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyBag(IDictionary<PropertyBagKey, object>?) PropertyBag class represents a collection of key-value pairs that allows to store any object for a given unique key. All keys are represented by PropertyBagKey but values may be of any type. Null values are not permitted, since a null entry represents the absence of the key. public PropertyBag(IDictionary<PropertyBagKey, object>? properties = null) Parameters properties IDictionary<PropertyBagKey, object> Properties Count Gets the number of items in the collection. public int Count { get; } Property Value int Keys Gets a read-only collection that contains the keys of the collection. public ReadOnlyCollection<PropertyBagKey> Keys { get; } Property Value ReadOnlyCollection<PropertyBagKey> Methods AddOrUpdateProperties(IDictionary<PropertyBagKey, object>) Adds or updates a collection of key-value pairs to the collection. public void AddOrUpdateProperties(IDictionary<PropertyBagKey, object> properties) Parameters properties IDictionary<PropertyBagKey, object> A collection of a key-value pairs, where key is represented as PropertyBagKey type. Remarks If a key is not found in the collection, a new key-value pair is created. If a key is already present in the collection, the value associated with the key is updated. AddOrUpdateProperty(PropertyBagKey, object) Adds or updates a key-value pair to the collection. public void AddOrUpdateProperty(PropertyBagKey key, object value) Parameters key PropertyBagKey A key represented as PropertyBagKey type. value object Any value which should be stored in a collection. Remarks If a key is not found in the collection, a new key-value pair is created. If a key is already present in the collection, the value associated with the key is updated. Clear() Removes all items from the collection. public void Clear() ContainsKey(PropertyBagKey) Determines whether the collection contains an element that has the specified key. public bool ContainsKey(PropertyBagKey key) Parameters key PropertyBagKey A key represented as PropertyBagKey type. Returns bool Boolean value determining whether the key is found in a collection. GetProperty(PropertyBagKey) Gets the value associated with the specified key from the collection. public object GetProperty(PropertyBagKey key) Parameters key PropertyBagKey A key represented as PropertyBagKey type. Returns object The value associated with the specified key. If the specified key is not found, this operation throws a KeyNotFoundException exception. Exceptions KeyNotFoundException If the specified key is not found. GetProperty<TValue>(PropertyBagKey) Gets the value associated with the specified key from the collection and casts it to the specified type TValue. public TValue GetProperty<TValue>(PropertyBagKey key) Parameters key PropertyBagKey A key represented as PropertyBagKey type. Returns TValue The value associated with the specified key. If the specified key is not found, this operation throws a KeyNotFoundException exception. If the specified key is found, however its type does not match with TValue it throws InvalidCastException. Type Parameters TValue The value type associated with the specified key. Exceptions KeyNotFoundException If the specified key is not found. InvalidCastException If the specified value type TValue does not match with a value type stored in the collection. TryGetProperty(PropertyBagKey, out object?) This method attempts to get the value associated with the specified key from the collection. public bool TryGetProperty(PropertyBagKey key, out object? value) Parameters key PropertyBagKey A key represented as PropertyBagKey type. value object When this method returns, contains the object value stored in the collection, if the key is found, or null if the key is not found. Returns bool true if a key was found successfully; otherwise, false TryGetProperty<TValue>(PropertyBagKey, out TValue?) This method attempts to get the value associated with the specified key from the collection and cast it to the specified type T. public bool TryGetProperty<TValue>(PropertyBagKey key, out TValue? value) Parameters key PropertyBagKey A key represented as PropertyBagKey type. value TValue When this method returns, contains the value of specified TValue type stored in the collection, if the key is found, or default value of TValue if the key is not found. Returns bool true if a key was found successfully and its type matches with TValue; otherwise, false Type Parameters TValue The value type associated with the specified key. Remarks This method does not throw exception when type of a value associated with a given key does not match with TValue."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.PropertyBagKey.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.PropertyBagKey.html",
    "title": "Class PropertyBagKey | XPing365",
    "keywords": "Class PropertyBagKey Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll The PropertyBagKey class is used to represent a key in a PropertyBag. The IEquatable<PropertyBagKey?> interface is implemented to allow for comparison of PropertyBagKey instances. public class PropertyBagKey : IEquatable<PropertyBagKey?> Inheritance object PropertyBagKey Implements IEquatable<PropertyBagKey> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyBagKey(string) The PropertyBagKey class is used to represent a key in a PropertyBag. The IEquatable<PropertyBagKey?> interface is implemented to allow for comparison of PropertyBagKey instances. public PropertyBagKey(string key) Parameters key string The key parameter represents the string value of the PropertyBagKey instance, which is used to identify this instance in a PropertyBag. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(PropertyBagKey?) Indicates whether the current object is equal to another object of the same type. public bool Equals(PropertyBagKey? other) Parameters other PropertyBagKey An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(PropertyBagKey?, PropertyBagKey?) Overloads the == operator and returns a boolean value indicating whether the two specified PropertyBagKey instances are equal. public static bool operator ==(PropertyBagKey? left, PropertyBagKey? right) Parameters left PropertyBagKey The left operand of the comparison operator right PropertyBagKey The right operand of the comparison operator Returns bool Boolean value that indicates whether the left parameter is equal to the right parameter operator !=(PropertyBagKey?, PropertyBagKey?) Overloads the != operator and returns a boolean value indicating whether the two specified PropertyBagKey instances are not equal. public static bool operator !=(PropertyBagKey? left, PropertyBagKey? right) Parameters left PropertyBagKey The left operand of the comparison operator right PropertyBagKey The right operand of the comparison operator Returns bool Boolean value that indicates whether the left parameter is not equal to the right parameter"
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.PropertyBagKeys.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.PropertyBagKeys.html",
    "title": "Class PropertyBagKeys | XPing365",
    "keywords": "Class PropertyBagKeys Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll This class is used to provide a set of predefined keys that can be used with the PropertyBag class. public static class PropertyBagKeys Inheritance object PropertyBagKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Since the PropertyBagKeys class is a static class, it cannot be instantiated. The class contains the properties for the common areas for instance, area related to Network Information or HTTP communication. Fields DnsResolvedIPAddresses Array of matching IP addresses associated with a DNS name of the host. public static readonly PropertyBagKey DnsResolvedIPAddresses Field Value PropertyBagKey HttpContent Represents the HTTP content. public static readonly PropertyBagKey HttpContent Field Value PropertyBagKey HttpFollowRedirect Represents the boolean value that indicates whether to follow redirection responses. public static readonly PropertyBagKey HttpFollowRedirect Field Value PropertyBagKey HttpMethod Represents the HTTP method. public static readonly PropertyBagKey HttpMethod Field Value PropertyBagKey HttpReasonPhrase Represents the HTTP reason phrase. public static readonly PropertyBagKey HttpReasonPhrase Field Value PropertyBagKey HttpRequestHeaders Represents the collection of HTTP request headers as IDictionary<string, IEnumerable<string>>. public static readonly PropertyBagKey HttpRequestHeaders Field Value PropertyBagKey HttpRequestTimeout Represents the TimeSpan value that indicates time to wait before the request times out. public static readonly PropertyBagKey HttpRequestTimeout Field Value PropertyBagKey HttpResponseHeaders Represents the collection of HTTP response headers as https://learn.microsoft.com/en-us/dotnet/api/system.net.http.headers.httpresponseheaders. public static readonly PropertyBagKey HttpResponseHeaders Field Value PropertyBagKey HttpResponseTrailingHeaders Represents the collection of trailing headers included in an HTTP response as https://learn.microsoft.com/en-us/dotnet/api/system.net.http.headers.httpresponseheaders. public static readonly PropertyBagKey HttpResponseTrailingHeaders Field Value PropertyBagKey HttpRetry Represents the boolean value determining whether to retry failing HTTP request. public static readonly PropertyBagKey HttpRetry Field Value PropertyBagKey HttpStatus Represents the HTTP status. public static readonly PropertyBagKey HttpStatus Field Value PropertyBagKey HttpVersion Represents the HTTP version. public static readonly PropertyBagKey HttpVersion Field Value PropertyBagKey IPAddress Represents IP address. See more on https://learn.microsoft.com/en-us/dotnet/api/system.net.ipaddress. public static readonly PropertyBagKey IPAddress Field Value PropertyBagKey IPStatus Represents IP status operation. See more on https://learn.microsoft.com/en-us/dotnet/api/system.net.networkinformation.ipstatus. public static readonly PropertyBagKey IPStatus Field Value PropertyBagKey PingDontFragmetOption Represents the boolean value that controls fragmentation of the data sent to the remote host. public static readonly PropertyBagKey PingDontFragmetOption Field Value PropertyBagKey PingRoundtripTime Represents the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message. public static readonly PropertyBagKey PingRoundtripTime Field Value PropertyBagKey PingTTLOption Represents the number of times the ping data can be forwarded. public static readonly PropertyBagKey PingTTLOption Field Value PropertyBagKey"
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestAgent.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestAgent.html",
    "title": "Class TestAgent | XPing365",
    "keywords": "Class TestAgent Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll This class is used to perform testing operations. As a base and abstract class, it provides a set of common properties and methods that are shared by all derived classes. The derived classes then implement their own specific functionality by overriding the base class methods. public abstract class TestAgent Inheritance object TestAgent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TestAgent(params TestStepHandler[]) This class is used to perform testing operations. As a base and abstract class, it provides a set of common properties and methods that are shared by all derived classes. The derived classes then implement their own specific functionality by overriding the base class methods. protected TestAgent(params TestStepHandler[] handlers) Parameters handlers TestStepHandler[] An array of TestStepHandler objects which will be used to perform specific test operation. Properties Handlers Gets a read-only collection of associated TestStepHandler objects. public IReadOnlyCollection<TestStepHandler> Handlers { get; } Property Value IReadOnlyCollection<TestStepHandler> Methods RunAsync(Uri, TestSettings, IValidator?, IProgress<TestStep>?, CancellationToken) The RunAsync method executes two stages to generate a TestSession object. In the first stage, it executes TestStepHandler objects that are defined in the derived classes. In the second stage, it executes an optional validator object that is used to validate the test session coming from the previous stage. public virtual Task<TestSession> RunAsync(Uri url, TestSettings settings, IValidator? validator = null, IProgress<TestStep>? progress = null, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. validator IValidator An optional IValidator object that can be used to validate the test session. progress IProgress<TestStep> An optional IProgress<TestStep> object that can be used to report progress during the validation process. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the validation process. Returns Task<TestSession> Returns a Task<TestStession> object that represents the asynchronous result of testing operations."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestSession.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestSession.html",
    "title": "Class TestSession | XPing365",
    "keywords": "Class TestSession Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll This class is used to represent a test session. It provides a set of properties that can be used to access information about the test session, such as its start date, duration, URL, state, and steps. public class TestSession Inheritance object TestSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TestSession(DateTime, Uri) This class is used to represent a test session. It provides a set of properties that can be used to access information about the test session, such as its start date, duration, URL, state, and steps. public TestSession(DateTime startDate, Uri url) Parameters startDate DateTime Represents the start date of the test session. url Uri Represents the URL of the server under tests. Properties DeclineReason Returns decline reason for the current test session. public string? DeclineReason { get; } Property Value string Duration Gets the total duration of the test session. public TimeSpan Duration { get; } Property Value TimeSpan Failures Returns a read-only collection of the failed test steps within current test session. public IReadOnlyCollection<TestStep> Failures { get; } Property Value IReadOnlyCollection<TestStep> IsValid Returns a boolean value indicating whether the test session is valid or not. Valid test session has all test steps completed successfully. Check Failures to get failed test steps. public bool IsValid { get; } Property Value bool StartDate Gets the start date of the test session. public DateTime StartDate { get; } Property Value DateTime State Gets the state of the test session. public TestSessionState State { get; } Property Value TestSessionState Steps Returns a read-only collection of the test steps executed within current test session. public IReadOnlyCollection<TestStep> Steps { get; } Property Value IReadOnlyCollection<TestStep> Url A Uri object that represents the URL of the page being validated. public Uri Url { get; } Property Value Uri Methods AddTestStep(TestStep) Internal use only, it adds a new TestStep object to the list of steps for the current test session. public void AddTestStep(TestStep step) Parameters step TestStep Complete() Internal use only, it sets the state of the test session to Completed after all tests steps are run. public void Complete() Decline(string) Internal use only, it sets the state of the test session to Declined state when declined by test agent. public void Decline(string declineReason) Parameters declineReason string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestSessionState.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestSessionState.html",
    "title": "Enum TestSessionState | XPing365",
    "keywords": "Enum TestSessionState Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll Represents the state of the TestSession. public enum TestSessionState Fields [Display(Name = \"completed\")] Completed = 1 The session has been completed. [Display(Name = \"declined\")] Declined = 2 The session has been declined by test agent. [Display(Name = \"not started\")] NotStarted = 0 The session is still being created."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestSettings.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestSettings.html",
    "title": "Class TestSettings | XPing365",
    "keywords": "Class TestSettings Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll This class is used to store settings for a test execution. It provides a set of properties that can be used to configure the behavior of the test run, such as the timeout duration, retry behavior, and HTTP redirection behavior. It also includes PropertyBag property to store custom settings as a key-value pairs. public sealed class TestSettings Inheritance object TestSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields DefaultHttpRequestTimeoutInSeconds Default Http request timeout in seconds. public const int DefaultHttpRequestTimeoutInSeconds = 30 Field Value int Properties DefaultForAvailability Gets a TestSettings object with default settings for server availability testing. The returned object has PingDontFragmetOption property set to true and the PingTTLOption property set to 64. See PingDontFragmetOption and PingTTLOption for more information. It also has Http request timeout set to DefaultHttpRequestTimeoutInSeconds value. public static TestSettings DefaultForAvailability { get; } Property Value TestSettings FollowHttpRedirectionResponses Gets or sets a boolean value which determines whether to follow HTTP redirection responses. Default is true, unless specified differently in DefaultForAvailability. public bool FollowHttpRedirectionResponses { get; set; } Property Value bool PropertyBag Gets a property bag which represents the custom properties of the test steps execution. public PropertyBag PropertyBag { get; } Property Value PropertyBag RetryHttpRequestWhenFailed Gets or sets a boolean value which determines whether to retry HTTP requests when they fail. Default is true, unless specified differently in DefaultForAvailability. public bool RetryHttpRequestWhenFailed { get; set; } Property Value bool Methods GetHttpContent() Returns HTTP content stored in the current test settings instance. public HttpContent? GetHttpContent() Returns HttpContent HttpContent stored in the current test settings. Null is returned if on HttpContent defined. GetHttpMethod() Returns HTTP method stored in the current test settings instance. public HttpMethod GetHttpMethod() Returns HttpMethod HTTP method stored in the current test settings. Get is returned if not specified. GetHttpRequestHeadersOrEmpty() Returns HTTP request headers stored in the current test settings instance. public IDictionary<string, IEnumerable<string>> GetHttpRequestHeadersOrEmpty() Returns IDictionary<string, IEnumerable<string>> HTTP request headers or empty dictionary if none specified."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStep.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStep.html",
    "title": "Class TestStep | XPing365",
    "keywords": "Class TestStep Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll This record represents a step in a test execution. It provides a set of properties that can be used to store information about the step, such as its name, start date, duration, result, and error message. public sealed record TestStep : IEquatable<TestStep> Inheritance object TestStep Implements IEquatable<TestStep> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors TestStep(string, DateTime, TimeSpan, TestStepType, TestStepResult, PropertyBag, string?) This record represents a step in a test execution. It provides a set of properties that can be used to store information about the step, such as its name, start date, duration, result, and error message. public TestStep(string Name, DateTime StartDate, TimeSpan Duration, TestStepType Type, TestStepResult Result, PropertyBag PropertyBag, string? ErrorMessage = null) Parameters Name string Represents the name of the test step. StartDate DateTime Represents the start date of the test step. Duration TimeSpan Represents the duration of the test step. Type TestStepType Represents the type of the test step. Result TestStepResult Represents the result of the test step. PropertyBag PropertyBag Represents the property bag which stores custom properties from test step. ErrorMessage string Represents the error message. It cannot be null if TestStepResult is Failed. Properties Duration Represents the duration of the test step. public TimeSpan Duration { get; init; } Property Value TimeSpan ErrorMessage Gets the error message if result is Failed; otherwise null; public string? ErrorMessage { get; } Property Value string Name Gets the name of the test step. public string Name { get; } Property Value string PropertyBag Gets the property bag which stores custom key-value pairs from test step. public PropertyBag PropertyBag { get; } Property Value PropertyBag Result Represents the result of the test step. public TestStepResult Result { get; init; } Property Value TestStepResult StartDate Gets the start date of the test step. public DateTime StartDate { get; } Property Value DateTime Type Represents the type of the test step. public TestStepType Type { get; init; } Property Value TestStepType Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStepHandler.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStepHandler.html",
    "title": "Class TestStepHandler | XPing365",
    "keywords": "Class TestStepHandler Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll This abstract class is used to perform action or validate test operation defined by the derived class and to create a new instance of a TestStep class. public abstract class TestStepHandler Inheritance object TestStepHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TestStepHandler(string, TestStepType) This abstract class is used to perform action or validate test operation defined by the derived class and to create a new instance of a TestStep class. protected TestStepHandler(string name, TestStepType type) Parameters name string A string representation of the step name. type TestStepType Determines TestStepType type of the current instance. Properties Name Gets a step name. public string Name { get; } Property Value string Type Gets a step type. public TestStepType Type { get; } Property Value TestStepType Methods CreateFailedTestStep(string) protected TestStep CreateFailedTestStep(string errorMessage) Parameters errorMessage string Returns TestStep CreateSuccessTestStep(DateTime, TimeSpan, PropertyBag) protected TestStep CreateSuccessTestStep(DateTime startTime, TimeSpan elapsedTime, PropertyBag propertyBag) Parameters startTime DateTime elapsedTime TimeSpan propertyBag PropertyBag Returns TestStep CreateTestStepFromException(Exception, DateTime, TimeSpan) protected TestStep CreateTestStepFromException(Exception exception, DateTime startTime, TimeSpan elapsedTime) Parameters exception Exception startTime DateTime elapsedTime TimeSpan Returns TestStep HandleStepAsync(Uri, TestSettings, TestSession, CancellationToken) The HandleStepAsync method is used to create TestStep object and perform action or validate test operation. It is an abstract method that must be implemented by the subclass. public abstract Task<TestStep> HandleStepAsync(Uri url, TestSettings settings, TestSession session, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the this operation. Returns Task<TestStep> TestStep object."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStepResult.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStepResult.html",
    "title": "Enum TestStepResult | XPing365",
    "keywords": "Enum TestStepResult Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll Represents a test step result. public enum TestStepResult Fields [Display(Name = \"failed\")] Failed = 1 Represents a failed test result. [Display(Name = \"succeeded\")] Succeeded = 0 Represents a successful test result."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStepType.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.TestStepType.html",
    "title": "Enum TestStepType | XPing365",
    "keywords": "Enum TestStepType Namespace XPing365.Sdk.Core Assembly XPing365.Sdk.Core.dll The TestStepType enum is used to specify the type of TestStepHandler, whether it is an action step or a validation step. An action step is used to create an action for instance retrieve data, while a validation step is used to validate retrieved data for its correctness. public enum TestStepType Fields [Display(Name = \"action step\")] ActionStep = 0 Represents action step. [Display(Name = \"validate step\")] ValidateStep = 1 Represents validate step."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.Validators.IValidator.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.Validators.IValidator.html",
    "title": "Interface IValidator | XPing365",
    "keywords": "Interface IValidator Namespace XPing365.Sdk.Core.Validators Assembly XPing365.Sdk.Core.dll Defines the properties and methods that objects that participate in TestSession validation must implement. public interface IValidator Remarks The IValidator interface is implemented by the Validator class, which is used to execute a collection of TestStepHandler objects that are used to validate TestSession object. Properties Validators Returns a read-only collection of validation test steps. IReadOnlyCollection<TestStepHandler> Validators { get; } Property Value IReadOnlyCollection<TestStepHandler> Methods ValidateAsync(Uri, TestSettings, TestSession, IProgress<TestStep>?, CancellationToken) This method is used to validate a TestSession object Task ValidateAsync(Uri url, TestSettings settings, TestSession session, IProgress<TestStep>? progress = null, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. progress IProgress<TestStep> An optional IProgress<TestStep?> object that can be used to report progress during the validation process. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the validation process. Returns Task Returns a Task object that represents the asynchronous validation operation."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.Validators.Validator.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.Validators.Validator.html",
    "title": "Class Validator | XPing365",
    "keywords": "Class Validator Namespace XPing365.Sdk.Core.Validators Assembly XPing365.Sdk.Core.dll The Validator class is responsible for executing a collection of TestStepHandler objects that are used to validate TestSession object. To use the Validator class, you can create a new instance of the class passing in the concrete instances of the TestStepHandler class for instance HttpStatusCodeValidator and provide such Validator object to RunAsync(Uri, TestSettings, IValidator?, IProgress<TestStep>?, CancellationToken) method. public sealed class Validator : IValidator Inheritance object Validator Implements IValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Validator(params TestStepHandler[]) The Validator class is responsible for executing a collection of TestStepHandler objects that are used to validate TestSession object. To use the Validator class, you can create a new instance of the class passing in the concrete instances of the TestStepHandler class for instance HttpStatusCodeValidator and provide such Validator object to RunAsync(Uri, TestSettings, IValidator?, IProgress<TestStep>?, CancellationToken) method. public Validator(params TestStepHandler[] validators) Parameters validators TestStepHandler[] A collection of validation test steps to validate TestSession object. Properties Validators Returns a read-only collection of validation test steps. public IReadOnlyCollection<TestStepHandler> Validators { get; } Property Value IReadOnlyCollection<TestStepHandler> Methods ValidateAsync(Uri, TestSettings, TestSession, IProgress<TestStep>?, CancellationToken) This method is used to validate a TestSession object. public Task ValidateAsync(Uri url, TestSettings settings, TestSession session, IProgress<TestStep>? progress = null, CancellationToken cancellationToken = default) Parameters url Uri A Uri object that represents the URL of the page being validated. settings TestSettings A TestSettings object that contains the settings for the test. session TestSession A TestSession object that represents the test session. progress IProgress<TestStep> An optional IProgress<TestStep> object that can be used to report progress during the validation process. cancellationToken CancellationToken An optional CancellationToken object that can be used to cancel the validation process. Returns Task Returns a Task object that represents the asynchronous validation operation. Remarks This method does nothing if no validators have been provided. Exceptions ArgumentNullException If any of the following parameters: url, settings or session is null."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.Validators.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.Validators.html",
    "title": "Namespace XPing365.Sdk.Core.Validators | XPing365",
    "keywords": "Namespace XPing365.Sdk.Core.Validators Classes Validator The Validator class is responsible for executing a collection of TestStepHandler objects that are used to validate TestSession object. To use the Validator class, you can create a new instance of the class passing in the concrete instances of the TestStepHandler class for instance HttpStatusCodeValidator and provide such Validator object to RunAsync(Uri, TestSettings, IValidator?, IProgress<TestStep>?, CancellationToken) method. Interfaces IValidator Defines the properties and methods that objects that participate in TestSession validation must implement."
  },
  "api/XPing365.Sdk.Core/XPing365.Sdk.Core.html": {
    "href": "api/XPing365.Sdk.Core/XPing365.Sdk.Core.html",
    "title": "Namespace XPing365.Sdk.Core | XPing365",
    "keywords": "Namespace XPing365.Sdk.Core Classes PropertyBag PropertyBag class represents a collection of key-value pairs that allows to store any object for a given unique key. All keys are represented by PropertyBagKey but values may be of any type. Null values are not permitted, since a null entry represents the absence of the key. PropertyBagKey The PropertyBagKey class is used to represent a key in a PropertyBag. The IEquatable<PropertyBagKey?> interface is implemented to allow for comparison of PropertyBagKey instances. PropertyBagKeys This class is used to provide a set of predefined keys that can be used with the PropertyBag class. TestAgent This class is used to perform testing operations. As a base and abstract class, it provides a set of common properties and methods that are shared by all derived classes. The derived classes then implement their own specific functionality by overriding the base class methods. TestSession This class is used to represent a test session. It provides a set of properties that can be used to access information about the test session, such as its start date, duration, URL, state, and steps. TestSettings This class is used to store settings for a test execution. It provides a set of properties that can be used to configure the behavior of the test run, such as the timeout duration, retry behavior, and HTTP redirection behavior. It also includes PropertyBag property to store custom settings as a key-value pairs. TestStep This record represents a step in a test execution. It provides a set of properties that can be used to store information about the step, such as its name, start date, duration, result, and error message. TestStepHandler This abstract class is used to perform action or validate test operation defined by the derived class and to create a new instance of a TestStep class. Enums TestSessionState Represents the state of the TestSession. TestStepResult Represents a test step result. TestStepType The TestStepType enum is used to specify the type of TestStepHandler, whether it is an action step or a validation step. An action step is used to create an action for instance retrieve data, while a validation step is used to validate retrieved data for its correctness."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | XPing365",
    "keywords": "Getting Started The library is distributed as a NuGet packages, which can be installed using the .NET CLI command dotnet add package. Here are the steps to get started: Installation using .NET CLI Open a command prompt or terminal window. Navigate to the directory where your project is located. Run the following command to install the XPing365 NuGet package: dotnet add package XPing365.Availability Once the package is installed, you can start using the XPing365 library in your project. using XPing365.Availability.Extensions; Host.CreateDefaultBuilder() .ConfigureServices(services => { services.AddAvailabilityTestAgent(); }); using XPing365.Availability var testAgent = _serviceProvider.GetRequiredService<AvailabilityTestAgent>(); TestSession session = await testAgent .RunAsync( new Uri(\"www.demoblaze.com\"), TestSettings.DefaultForAvailability) .ConfigureAwait(false); Thatâ€™s it! Youâ€™re now ready to start automating your web application tests and monitoring your serverâ€™s content using XPing365 SDK."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | XPing365",
    "keywords": "Introduction"
  },
  "docs/wiki/Configuration.html": {
    "href": "docs/wiki/Configuration.html",
    "title": "Configuration for XPing365 SDK library | XPing365",
    "keywords": "Configuration for XPing365 SDK library Configuration for the XPing365 SDK is delivered through IConfiguration service provided by .NET framework. You can learn more about Configuration in .NET. The following table represents keys and their corresponding values for the XPing365 SDK configuration. Key Value Description HttpClientName \"namedHttpClientName\" Named HttpClient used during library setup ThrowOnError True/False Wether to throw on fetching/parsing error Example of appsettings.json configuration file is shown below { \"WebDataRetriever\": { \"HttpClientName\": \"httpClient\", \"ThrowOnError\": true } }"
  },
  "docs/wiki/Home.html": {
    "href": "docs/wiki/Home.html",
    "title": "Welcome to xping365-sdk repository | XPing365",
    "keywords": "Welcome to xping365-sdk repository Learn about XPing365 SDK, a free and an open source library written in C# to help automate web applications testing. What's XPing 365 SDK XPing365 SDK helps you automate web applications testing. It is designed to make eXternal Ping(s) to web applications to verify its availability and monitor its content by scraping data from the web pages. It allows users to parametrize URLs and generate hundrets of different queries. Getting started with XPing 365 SDK In this quickstart, you will learn how to: Use Dependency injection in .NET to setup the library Declare a class which will represent your web-page you're going to test Fetch the web-page and write tests Setup the library This library uses dependency injection supported by the .NET framework. Please follow this link Dependency injection in .NET to learn more about it. This tutorial assumes you have basic knowledge about this software design pattern. The SDK consists of two main services: IWebDataRetriever and IParserFactory. The first service is implemented by a concrete type WebDataRetriever and is responsible to fetch web-page content. It has a dependency to other services like IHttpClientFactory, IConfiguration, ILogger and IParserFactory which is responsible to parse the HTML content. Except IParserFactory all other services are provided by the .NET framework. IConfiguration and ILogger are resolved automatically, however IHttpClientFactory requires setup. Configuring IHttpClientFactory with dependency injection There are multiple ways to use IHttpClientFactory. For the sake of brevity, this guidance uses Named Client. builder.Services.AddHttpClient(\"httpClient\", httpClient => { httpClient.BaseAddress = new Uri(\"https://www.demoblaze.com/\"); }); The name httpClient given in the above setup is provided to WebDataRetriever through IConfiguration service. Example of appsettings.json configuration fulfilling above requirement is shown below { \"WebDataRetriever\": { \"HttpClientName\": \"httpClient\", \"ThrowOnError\": true } } It is also possible to use other options to configure IHttpClientFactory service. If you configure your IHttpClientFactory using basic setup, then no configuration is required. If you want to learn more about WebDataRetriever configuration file please follow the Configuration page of this wiki. Once all above is configured the full setup looks like this private static IHost Initialize() { var host = Host.CreateDefaultBuilder() .ConfigureServices(services => { services.AddHttpClient<IWebDataRetriever, WebDataRetriever>(\"httpClient\", client => { client.BaseAddress = new Uri(\"https://www.demoblaze.com/\"); }); services.AddTransient<IParserFactory, ParserFactory>(); services.AddTransient<IWebDataRetriever, WebDataRetriever>(); }) .Build(); return host; } Declaring web-page classes Next step is to define classes which will represent web-pages you are going to test. Each class representing a web-page you are passing to IWebDataRetriever service needs to derive from HtmlSource, for instance public class HomePage : HtmlSource { [XPath(\"//head/title\", ReturnType.InnerText)] public string? Title { get; set; } [XPath(\"//a[@id='nava']/img\", \"src\")] public string? LogoUrl { get; set; } [XPath(\"//div[@id='navbarExample']/ul\")] public MainMenu? MainMenu { get; set; } } The XPathAttribute which decorates public properties guides IParser how to retrieve content from the HTML source and populate the class. The class representing web-page might consist of other classes which describe other components of the web-page, i.e. MainMenu. In this case the MainMenu does not to have to derive from HtmlSource. It's declaration is shown as follows: public class MainMenu { public class MenuItem { [XPath(\"./a\", ReturnType.InnerText)] public string? Text { get; set; } [XPath(\"./a\", \"href\")] public string? Link { get; set; } } [XPath(\".//li\")] public IList<MenuItem>? Items { get; set; } } In this example all the XPathAttribute properties are relative to the XPathAttribute property declared in HomePage class for this type. Web-page verification Once the library is setup and web-page classes are declared we fetch the content of the web-page and pupulate the declared class with it based on the XPathAttribute decorated in public properties. First we should get the IWebDataRetriever service, i.e. var webDataRetriever = host.Services.GetRequiredService<IWebDataRetriever>(); Next we use IWebDataRetriever API to fetch the content and populate our class as follows: HomePage? homePage = await webDataRetriever.GetFromHtmlAsync<HomePage>(\"/home.html\"); Finally we write tests against the retrieved HomePage class. Please refer to the Samples folder in this repository to check how such tests can be implemented."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | XPing365",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}